<?xml version="1.0" encoding="UTF-8"?>
<schema xmlns="http://www.w3.org/2001/XMLSchema" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:platformCore="urn:core_2013_2.platform.webservices.netsuite.com" xmlns:platformCoreTyp="urn:types.core_2013_2.platform.webservices.netsuite.com" xmlns:platformFaultTyp="urn:types.faults_2013_2.platform.webservices.netsuite.com" targetNamespace="urn:core_2013_2.platform.webservices.netsuite.com" elementFormDefault="qualified" attributeFormDefault="unqualified">
    <import namespace="urn:types.core_2013_2.platform.webservices.netsuite.com" schemaLocation="platform.coreTypes.xsd"/>
    <import namespace="urn:types.faults_2013_2.platform.webservices.netsuite.com" schemaLocation="platform.faultTypes.xsd"/>

	<!-- Status -->
    <complexType name="StatusDetail">
        <sequence>
            <element name="code" type="platformFaultTyp:StatusDetailCodeType"/>
            <element name="message" type="xsd:string" minOccurs="0"/>
        </sequence>
        <attribute name="type" type="platformFaultTyp:StatusDetailType" default="ERROR"/>
    </complexType>
    <complexType name="Status">
        <sequence>
            <element name="statusDetail" type="platformCore:StatusDetail" minOccurs="0" maxOccurs="unbounded"/>
        </sequence>
        <attribute name="isSuccess" type="xsd:boolean"/>
    </complexType>
    <element name="status" type="platformCore:Status"/>
    <complexType name="WsRole">
        <sequence>
            <element name="role" type="platformCore:RecordRef" minOccurs="0"/>
            <element name="isDefault" type="xsd:boolean" minOccurs="0"/>
            <element name="isInactive" type="xsd:boolean" minOccurs="0"/>
            <element name="isLoggedInRole" type="xsd:boolean" minOccurs="0"/>
            <element name="priority" type="platformCore:any_with_type" minOccurs="0"/>
            <element name="changedBy" type="platformCore:ChangedBy" minOccurs="0"/>
        </sequence>
    </complexType>
    <complexType name="ChangedBy">
        <all>
            <element name="when" type="platformCore:When" />
            <element name="by" type="xs:string" />
        </all>
    </complexType>
    <complexType name="When">
        <choice>
            <element name="timestamp" type="xs:int" minOccurs="0"/>
            <element name="time" type="platformCore:Time" minOccurs="0"/>
        </choice>
    </complexType>
    <complexType name="Time">
        <simpleContent>
            <extension base="xs:date">
                <attribute name="zone" type="xs:string" />
            </extension>
        </simpleContent>
    </complexType>
    <xs:complexType name="any_with_type">
        <xs:simpleContent>
            <xs:extension base="xs:anyType">
                <xs:attribute name="type" type="xs:string"/>
            </xs:extension>
        </xs:simpleContent>
    </xs:complexType> 
    <complexType name="WsRoleList">
        <sequence>
            <element name="wsRole" type="platformCore:WsRole" minOccurs="0" maxOccurs="unbounded"/>
        </sequence>
    </complexType>
    <element name="wsRoleList" type="platformCore:WsRoleList"/>    
    <!-- Login Passport -->
    <complexType name="Passport">
        <sequence>
            <element name="email" type="xsd:string"/>
            <element name="password" type="xsd:string"/>
            <element name="account" type="xsd:string"/>
            <element name="role" type="platformCore:RecordRef" minOccurs="0"/>
        </sequence>
    </complexType>
    
    <complexType name="BaseRef" abstract="true">
        <sequence>
            <element name="name" type="xsd:string" minOccurs="0"/>
            <!-- record name -->
        </sequence>
    </complexType>
    <element name="baseRef" type="platformCore:BaseRef"/>
    <complexType name="RecordRef">
        <complexContent>
            <extension base="platformCore:BaseRef">
                <attribute name="internalId" type="xsd:string"/>
                <attribute name="externalId" type="xsd:string"/>
            </extension>
        </complexContent>
    </complexType>
</schema>
